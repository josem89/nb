{
    "id": 0,
    "type": 1,
    "name": "Copy of Extract Zip Files",
    "description": "This action will extract files from a ZIP archive.  It has the ability to extract password protected files by either a supplied password or bruteforce. Requires FILENAME entity to have attachment_id attribute to download file from Case Wall.",
    "script": "# ==============================================================================\n# title           : Extract Zip Files\n# description     : This action will extract ZIP files.  It will use the attachment_id\n#                 : attribute of a file entities to pull the file from the case wall and extract it.\n#                 : The action will create entities out of the extracted files and save them to the case wall.\n# author          : robb@siemplify.co\n# date            : 2022-02-18\n# python_version  : 3.7\n# libraries       :\n# requirements    :\n# product_version :\n# ==============================================================================\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler, convert_dict_to_json_result_dict\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nimport os\nimport io\n\n\nfrom AttachmentsManager import AttachmentsManager\n\nINTEGRATION_NAME = \"FileUtilities\"\nACTION_NAME = \"Extract Zip Files\"\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = ACTION_NAME\n    \n    include_data = siemplify.extract_action_param(\"Include Data In JSON Result\",  print_value=True).lower() == \"true\"\n    bruteforce_password = siemplify.extract_action_param(\"BruteForce Password\", print_value=True).lower() == \"true\"\n    create_entities = siemplify.extract_action_param(\"Create Entities\", print_value=True).lower() == \"true\"\n    add_to_case_wall = siemplify.extract_action_param(\"Add to Case Wall\", print_value=True).lower() == \"true\"\n    #zip_password = siemplify.extract_action_param(\"Zip File Password\", print_value=True)\n    #zip_password_delimiter = siemplify.extract_action_param(\"Zip Password List Delimiter\", print_value=True)\n    \n    zip_passwords = list(filter(None, [x.strip() for x in siemplify.extract_action_param(\"Zip File Password\", default_value=\"\")\n                    .split(siemplify.extract_action_param(\"Zip Password List Delimiter\", print_value=True))]))\n    status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n    output_message = \"output message :\"  # human readable message, showed in UI as the action result\n    result_value = \"false\"  # Set a simple result value, used for playbook if\\else and placeholders.\n    attach_mgr = AttachmentsManager(siemplify=siemplify)\n    \n    extracted_files = {}\n    for entity in siemplify.target_entities:\n        if entity.entity_type == \"FILENAME\":\n            siemplify.LOGGER.info(f\"The entity {entity.identifier} is being checked for being zip\")\n            if 'attachment_id' in entity.additional_properties: #and os.path.splitext(entity.identifier)[1].lower() == \".zip\":\n                _attachment = siemplify.get_attachment(entity.additional_properties['attachment_id'])\n                zip_file_content = io.BytesIO(_attachment.getvalue())\n                extracted_files[entity.identifier] = attach_mgr.extract_zip(entity.identifier,zip_file_content, bruteforce = bruteforce_password, pwds=zip_passwords)\n                result_value = \"true\"\n                        \n    if add_to_case_wall:\n        for file_name in extracted_files:\n            for x_file in extracted_files[file_name]:\n                siemplify.LOGGER.info(f\"Adding the file: {x_file['filename']} to the case wall\")\n                attachment_res = attach_mgr.add_attachment(x_file['filename'], x_file['raw'], siemplify.case_id, siemplify.alert_id)\n                x_file['attachment_id'] = attachment_res\n\n    if include_data == False:\n        for file_name in extracted_files:\n            x_files = extracted_files[file_name]\n            for x_file in extracted_files[file_name]:\n                del x_file['raw']\n            \n    if create_entities:\n        for file_name in extracted_files:\n            siemplify.result.add_json(file_name, extracted_files[file_name],\"Zip File\")\n            attach_mgr.create_file_entities(extracted_files[file_name])\n    \n    siemplify.result.add_result_json(convert_dict_to_json_result_dict(extracted_files))\n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "integration": "FileUtilities",
    "creator": "7a7f9e2c-7774-4221-8558-986f5708fd17",
    "creatorFullName": "jose marin",
    "isEnabled": true,
    "isCustom": true,
    "version": 27,
    "parameters": [
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Include Data In JSON Result",
            "defaultValue": "false",
            "type": 0,
            "description": "Include the data from the extracted files as base64 encoded values in the JSON result of the action.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Create Entities",
            "defaultValue": "true",
            "type": 0,
            "description": "Create entities out of the extracted files.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Zip File Password",
            "defaultValue": "",
            "type": 2,
            "description": "If the zip file is password protected, use this password to extract.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "BruteForce Password",
            "defaultValue": "false",
            "type": 0,
            "description": "When enabled, the action will attempt to brute force any password protected Zip files.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Add to Case Wall",
            "defaultValue": "true",
            "type": 0,
            "description": "Add the extracted files to the case wall.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Zip Password List Delimiter",
            "defaultValue": ",",
            "type": 2,
            "description": "This is character that separates multiple passwords in the Zip File Password parameter.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Output Name",
            "defaultValue": "zip_files_extracted",
            "type": 2,
            "description": null,
            "mode": 0,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Result Json Example",
            "defaultValue": "{}",
            "type": 2,
            "description": null,
            "mode": 2,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Include JSON Result",
            "defaultValue": "True",
            "type": 0,
            "description": null,
            "mode": 0,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Polling Timeout",
            "defaultValue": "300",
            "type": 17,
            "description": "Will poll until this threshold is reached. Then the actions ends with a timeout.",
            "mode": 0,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Default Return Value",
            "defaultValue": "",
            "type": 2,
            "description": "On timeout, this value will be returned by the script via the Output Name parameter.",
            "mode": 0,
            "optionalValues": null
        }
    ],
    "connectorRules": null,
    "isConnectorRulesSupported": false,
    "documentationLink": null,
    "pythonVersion": "V3_7"
}