{"Name":"Enrich Entities","Description":"Enrich IP addresses, hosts, URLs and hashes with information from ThreatConnect","Script":"from SiemplifyUtils import output_handler\nfrom SiemplifyDataModel import EntityTypes\nfrom SiemplifyAction import SiemplifyAction\nfrom ThreatConnectManager import ThreatconnectAPI\nfrom SiemplifyUtils import dict_to_flat, add_prefix_to_dict_keys, flat_dict_to_csv, convert_dict_to_json_result_dict\n\nACTION_NAME = \"ThreatConnect_EnrichEntities\"\n\n# Available Indicator Types - apiBranch\nADDRESS = 'addresses'\nFILE = 'files'\nHOST = 'hosts'\nURL = 'urls'\n\n\n# Enrich target entity with threatConnect info and add web link with full details to entity\ndef enrich_entity(indicator_data, indicator_type, entity, siemplify):\n    # Extract weblink\n    try:\n        link = indicator_data['general'][indicator_type]['webLink']\n        siemplify.result.add_entity_link(entity.identifier, link)\n    except Exception as e:\n        siemplify.LOGGER.error(\"Cannot extract link from entity data {}\".format(entity.identifier))\n        siemplify.LOGGER.exception(e)\n\n    # Set risk level\n    if indicator_data['general'][indicator_type].get('threatAssessRating', 0) > 1:\n        entity.is_suspicious = True\n\n    flat_report = dict_to_flat(indicator_data)\n    flat_report = add_prefix_to_dict_keys(flat_report, \"TC\")\n    entity.additional_properties.update(flat_report)\n    entity.is_enriched = True\n    return True\n\n\ndef add_insight(indicator_data, indicator_type, entity, siemplify):\n    insight_msg = ''\n    threat_asset_rating = indicator_data.get('general', {}).get(indicator_type, {}).get('threatAssessRating')\n    confidence = indicator_data.get('general', {}).get(indicator_type, {}).get('confidence')\n    description = indicator_data.get('general', {}).get(indicator_type, {}).get('description')\n    tags_list = indicator_data.get('tags') or []\n    tags = '| '.join(str(tag) for tag in tags_list)\n\n    insight_msg += u'Threat asset rating: {0}. \\n'.format(threat_asset_rating) \\\n        if threat_asset_rating else u'No threat asset rating. \\n'\n\n    insight_msg += u'Confidence: {0}. \\n'.format(confidence) \\\n        if confidence else u'Confidence: 0 \\n'\n\n    insight_msg += u'Description: {0}. \\n'.format(description) \\\n        if description else u'No description. \\n'\n\n    insight_msg += u'Tags: {0}. \\n'.format(tags) \\\n        if tags else u'No tags. \\n'\n\n    siemplify.add_entity_insight(entity, insight_msg, triggered_by='ThreatConnect')\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = ACTION_NAME\n\n    conf = siemplify.get_configuration('ThreatConnect')\n    api_access_id = conf['ApiAccessId']\n    api_secret_key = conf['ApiSecretKey']\n    api_default_org = conf['ApiDefaultOrg']\n    api_base_url = conf['ApiBaseUrl']\n\n    owner_name = siemplify.parameters.get('Owner Name', None)\n    enriched_entities = []\n    json_results = {}\n\n    threat_connect = ThreatconnectAPI(api_access_id, api_secret_key, api_default_org, api_base_url)\n    threat_connect.owner = api_default_org\n\n    for entity in siemplify.target_entities:\n        entity_original_identifier = entity.additional_properties.get('OriginalIdentifier', entity.identifier.lower())\n        try:\n            if entity.entity_type == EntityTypes.ADDRESS:\n                indicator_info = threat_connect.get_indicator_info(ADDRESS, entity_original_identifier, owner_name)\n                if indicator_info:\n                    json_results[entity.identifier] = indicator_info\n                    enrich_entity(indicator_info, \"address\", entity, siemplify)\n                    add_insight(indicator_info, \"address\", entity, siemplify)\n                    enriched_entities.append(entity)\n\n            if entity.entity_type == EntityTypes.FILEHASH:\n                indicator_info = threat_connect.get_indicator_info(FILE, entity_original_identifier.upper(), owner_name)\n                if indicator_info:\n                    json_results[entity.identifier] = indicator_info\n                    enrich_entity(indicator_info, \"file\", entity, siemplify)\n                    add_insight(indicator_info, \"file\", entity, siemplify)\n                    enriched_entities.append(entity)\n\n            if entity.entity_type == EntityTypes.URL:\n                indicator_info = threat_connect.get_indicator_info(URL, entity_original_identifier, owner_name)\n                if indicator_info:\n                    json_results[entity.identifier] = indicator_info\n                    enrich_entity(indicator_info, \"url\", entity, siemplify)\n                    add_insight(indicator_info, \"url\", entity, siemplify)\n                    enriched_entities.append(entity)\n\n            if entity.entity_type == EntityTypes.HOSTNAME:\n                indicator_info = threat_connect.get_indicator_info(HOST, entity_original_identifier, owner_name)\n                if indicator_info:\n                    json_results[entity.identifier] = indicator_info\n                    enrich_entity(indicator_info, \"host\", entity, siemplify)\n                    add_insight(indicator_info, \"host\", entity, siemplify)\n                    enriched_entities.append(entity)\n\n        except Exception as e:\n            siemplify.LOGGER.error(\"Error enriching entity {}\".format(entity.identifier))\n            siemplify.LOGGER.exception(e)\n\n    if enriched_entities:\n        output_message = 'Following entities were enriched by ThreatConnect. \\n{0}'.format(enriched_entities)\n        result_value = 'true'\n        siemplify.update_entities(enriched_entities)\n    else:\n        output_message = 'No entities were enriched.'\n        result_value = 'false'\n\n    # add json\n    siemplify.result.add_result_json(convert_dict_to_json_result_dict(json_results))\n\n    siemplify.end(output_message, result_value)\n\n\nif __name__ == '__main__':\n    main()","IntegrationIdentifier":"ThreatConnect","ScriptResultName":"is_enriched","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"[{\"EntityResult\": {\"securityLabels\": {\"securityLabel\": [], \"resultCount\": 0}, \"owners\": {\"owner\": [{\"type\": \"Organization\", \"id\": 440, \"name\": \"S\"}]}, \"victims\": {\"resultCount\": 0, \"victim\": []}, \"tags\": [\"C2\", \"Malware\"], \"general\": {\"url\": {\"rating\": 5.0, \"confidence\": 100, \"dateAdded\": \"2018-01-09T20: 12: 11Z\", \"description\": \"URLAssociatedwithCryptoLockerC2Servers\", \"threatAssessConfidence\": 93.33, \"lastModified\": \"2018-01-09T20: 13: 24Z\", \"threatAssessRating\": 4.33, \"webLink\": \"https: //sandbox.threatconnect.com/auth/indicators/details/url.xhtml?orgid=43743075&owner=S\", \"text\": \"http: //markossolomon.com/f1q7qx.php\", \"owner\": {\"type\": \"Organization\", \"id\": 440, \"name\": \"S\"}, \"id\": 43743075}}, \"observations\": {\"resultCount\": 0, \"observation\": []}, \"groups\": null, \"indicators\": {\"indicator\": [], \"resultCount\": 0}, \"attributes\": {\"Description\": [\"URLAssociatedwithCryptoLockerC2Servers\"]}, \"observationCount\": {\"observationCount\": {\"count\": 0}}, \"victimAssets\": {\"victimAsset\": [], \"resultCount\": 0}}, \"Entity\": \"HTTP: //MARKOSSOLOMON.COM/F1Q7QX.PHP\"}]","ShowResult":true}],"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":0.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Owner name to fetch the data from.","Name":"Owner Name","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":["HOSTNAME","DestinationURL","FILEHASH","ADDRESS"]},"SimulationDataJson":"{\"Entities\": [\"HOSTNAME\", \"DestinationURL\", \"FILEHASH\", \"ADDRESS\"]}"}