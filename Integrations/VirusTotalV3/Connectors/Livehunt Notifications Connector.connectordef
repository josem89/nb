{
    "id": 0,
    "type": 0,
    "name": "Livehunt Notifications Connector",
    "description": "Get Livehunt Notifications",
    "script": "from SiemplifyUtils import output_handler, unix_now\nfrom SiemplifyConnectors import SiemplifyConnectorExecution\nfrom TIPCommon import extract_connector_param\nfrom constants import DEFAULT_TIME_FRAME, DEFAULT_LIMIT, EVENTS_DEFAULT_LIMIT\nfrom UtilsManager import read_ids, write_ids, get_last_success_time, is_approaching_timeout, \\\n    get_environment_common, is_overflowed, save_timestamp, pass_whitelist_filter, UNIX_FORMAT\nfrom VirusTotalManager import VirusTotalManager\nfrom SiemplifyConnectorsDataModel import AlertInfo\nimport sys\n\nconnector_starting_time = unix_now()\nCONNECTOR_NAME = \"Livehunt Notifications Connector\"\n\n\n@output_handler\ndef main(is_test_run):\n    siemplify = SiemplifyConnectorExecution()\n    siemplify.script_name = CONNECTOR_NAME\n    processed_alerts = []\n\n    if is_test_run:\n        siemplify.LOGGER.info(\"***** This is an \\\"IDE Play Button\\\"\\\\\\\"Run Connector once\\\" test run ******\")\n\n    siemplify.LOGGER.info(\"------------------- Main - Param Init -------------------\")\n\n    api_key = extract_connector_param(siemplify, param_name=\"API Key\", is_mandatory=True)\n    verify_ssl = extract_connector_param(siemplify, param_name=\"Verify SSL\", input_type=bool, print_value=True)\n\n    environment_field_name = extract_connector_param(siemplify, param_name=\"Environment Field Name\", print_value=True)\n    environment_regex_pattern = extract_connector_param(siemplify, param_name=\"Environment Regex Pattern\",\n                                                        print_value=True)\n\n    script_timeout = extract_connector_param(siemplify, param_name=\"PythonProcessTimeout\", is_mandatory=True,\n                                             input_type=int, print_value=True)\n\n    hours_backwards = extract_connector_param(siemplify, param_name=\"Max Hours Backwards\", input_type=int,\n                                              default_value=DEFAULT_TIME_FRAME, print_value=True)\n    fetch_limit = extract_connector_param(siemplify, param_name=\"Max Alerts Per Cycle\", input_type=int,\n                                          is_mandatory=True, default_value=DEFAULT_LIMIT, print_value=True)\n\n    whitelist_as_a_blacklist = extract_connector_param(siemplify, \"Use whitelist as a blacklist\", is_mandatory=True,\n                                                       input_type=bool, print_value=True)\n    device_product_field = extract_connector_param(siemplify, \"DeviceProductField\", is_mandatory=True)\n\n    try:\n        siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n\n        if fetch_limit < 0:\n            siemplify.LOGGER.info(f\"\\\"Max Alerts Per Cycle\\\" must be non-negative. The default value \"\n                                  f\"{DEFAULT_LIMIT} will be used\")\n            fetch_limit = DEFAULT_LIMIT\n\n        if hours_backwards < 0:\n            siemplify.LOGGER.info(f\"\\\"Max Hours Backwards\\\" must be non-negative. The default value \"\n                                  f\"{DEFAULT_TIME_FRAME} will be used\")\n            hours_backwards = DEFAULT_TIME_FRAME\n\n        # Read already existing alerts ids\n        existing_ids = read_ids(siemplify)\n        siemplify.LOGGER.info(f\"Successfully loaded {len(existing_ids)} existing ids\")\n\n        manager = VirusTotalManager(api_key=api_key, verify_ssl=verify_ssl, siemplify_logger=siemplify.LOGGER)\n\n        fetched_alerts = []\n        filtered_alerts = manager.get_livehunt_notifications(\n            existing_ids=existing_ids,\n            limit=fetch_limit,\n            start_timestamp=int(\n                get_last_success_time(siemplify=siemplify, offset_with_metric={\"hours\": hours_backwards},\n                                      time_format=UNIX_FORMAT) / 1000)\n        )\n\n        siemplify.LOGGER.info(f\"Fetched {len(filtered_alerts)} alerts\")\n\n        if is_test_run:\n            siemplify.LOGGER.info(\"This is a TEST run. Only 1 alert will be processed.\")\n            filtered_alerts = filtered_alerts[:1]\n\n        for alert in filtered_alerts:\n            try:\n                if is_approaching_timeout(script_timeout, connector_starting_time):\n                    siemplify.LOGGER.info(\"Timeout is approaching. Connector will gracefully exit\")\n                    break\n\n                if len(processed_alerts) >= fetch_limit:\n                    # Provide slicing for the alerts amount.\n                    siemplify.LOGGER.info(\n                        \"Reached max number of alerts cycle. No more alerts will be processed in this cycle.\"\n                    )\n                    break\n\n                siemplify.LOGGER.info(f\"Started processing alert {alert.notification_id}\")\n\n                # Update existing alerts\n                existing_ids.append(alert.notification_id)\n                fetched_alerts.append(alert)\n\n                if not pass_filters(siemplify, whitelist_as_a_blacklist, alert, \"rule_name\"):\n                    continue\n\n                # Update existing alerts\n                alert_info = alert.get_alert_info(\n                    AlertInfo(),\n                    get_environment_common(siemplify, environment_field_name, environment_regex_pattern)\n                )\n\n                if is_overflowed(siemplify, alert_info, is_test_run):\n                    siemplify.LOGGER.info(\n                        f\"{alert_info.rule_generator}-{alert_info.ticket_id}-{alert_info.environment}\"\n                        f\"-{alert_info.device_product} found as overflow alert. Skipping...\")\n                    # If is overflowed we should skip\n                    continue\n\n                processed_alerts.append(alert_info)\n                siemplify.LOGGER.info(f\"Alert {alert.notification_id} was created with date {alert.date}.\")\n\n            except Exception as e:\n                siemplify.LOGGER.error(f\"Failed to process alert {alert.notification_id}\")\n                siemplify.LOGGER.exception(e)\n\n                if is_test_run:\n                    raise\n\n            siemplify.LOGGER.info(f\"Finished processing alert {alert.notification_id}\")\n\n        if not is_test_run:\n            siemplify.LOGGER.info(\"Saving existing ids.\")\n            write_ids(siemplify, existing_ids)\n            save_timestamp(siemplify=siemplify, alerts=fetched_alerts, timestamp_key=\"date\")\n\n        siemplify.LOGGER.info(f\"Alerts processed: {len(processed_alerts)} out of {len(fetched_alerts)}\")\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"Got exception on main handler. Error: {e}\")\n        siemplify.LOGGER.exception(e)\n\n        if is_test_run:\n            raise\n\n    siemplify.LOGGER.info(f\"Created total of {len(processed_alerts)} cases\")\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(processed_alerts)\n\n\ndef pass_filters(siemplify, whitelist_as_a_blacklist, alert, model_key, organization_filter_key=None,\n                 target_organizations=None, severity_filter_key=None, min_severity=None):\n    # All alert filters should be checked here\n    return True\n\n\nif __name__ == \"__main__\":\n    # Connectors are run in iterations. The interval is configurable from the ConnectorsScreen UI.\n    is_test = not (len(sys.argv) < 2 or sys.argv[1] == \"True\")\n    main(is_test)\n",
    "integration": "VirusTotalV3",
    "creator": "7a7f9e2c-7774-4221-8558-986f5708fd17",
    "creatorFullName": "jose marin",
    "isEnabled": true,
    "isCustom": true,
    "version": 14,
    "parameters": [
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "API Key",
            "defaultValue": "",
            "type": 3,
            "description": "Specify the API Key.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Product Field Name",
            "defaultValue": "Product Name",
            "type": 2,
            "description": "Enter the source field name in order to retrieve the Product Field name.",
            "mode": 0,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Environment Field Name",
            "defaultValue": "",
            "type": 2,
            "description": "Describes the name of the field where the environment name is stored. If the environment field isn't found, the environment is the default environment.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Environment Regex Pattern",
            "defaultValue": ".*",
            "type": 2,
            "description": "A regex pattern to run on the value found in the \"Environment Field Name\" field. Default is .* to catch all and return the value unchanged. Used to allow the user to manipulate the environment field via regex logic. If the regex pattern is null or empty, or the environment value is null, the final environment result is the default environment.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Event Field Name",
            "defaultValue": "eventType",
            "type": 2,
            "description": "Enter the source field name in order to retrieve the Event Field name.",
            "mode": 0,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Max Alerts Per Cycle",
            "defaultValue": "10",
            "type": 1,
            "description": "Specify how many alerts should be processed during one connector run.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Max Hours Backwards",
            "defaultValue": "1",
            "type": 1,
            "description": "Amount of hours from where to fetch model breaches.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Proxy Password",
            "defaultValue": "",
            "type": 3,
            "description": "The proxy password to authenticate with.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Proxy Server Address",
            "defaultValue": "",
            "type": 2,
            "description": "The address of the proxy server to use.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Proxy Username",
            "defaultValue": "",
            "type": 2,
            "description": "The proxy username to authenticate with.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "PythonProcessTimeout",
            "defaultValue": "180",
            "type": 1,
            "description": "Timeout limit for the python process running the current script.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Use whitelist as a blacklist",
            "defaultValue": "false",
            "type": 0,
            "description": "If enabled, whitelist will be used as a blacklist.",
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Verify SSL",
            "defaultValue": "true",
            "type": 0,
            "description": "If enabled, verify the SSL certificate for the connection to the Darktrace server is valid.",
            "mode": 1,
            "optionalValues": null
        }
    ],
    "connectorRules": [],
    "isConnectorRulesSupported": false,
    "documentationLink": null,
    "pythonVersion": "V3_7"
}