{
    "uniqueIdentifier": "6bf59a60-d063-4ef0-805b-672c8f03cfa5",
    "id": 0,
    "jobDefinitionId": 0,
    "name": "Sync AS Incidents",
    "integration": "MicrosoftAzureSentinel",
    "script": "from SiemplifyJob import SiemplifyJob\nfrom ExtendedMicrosoftAzureSentinelManager import ExtendedMicrosoftAzureSentinelManager\nimport datetime, json, requests, re\nfrom SiemplifyUtils import extract_script_param, utc_now, convert_datetime_to_unix_time, convert_unixtime_to_datetime, unix_now\n\nTIME_FORMAT = \"%Y-%m-%dT%H:%M:%S.%fZ\"\nOPEN_CASE_STATUS = '1'\nCLOSE_CASE_STATUS = '2'\nINTEGRATION_NAME = \"MicrosoftAzureSentinel\"\nSCRIPT_NAME = \"Sync AS Incidents\"\nGET_USERS_URL = '{}/external/v1/settings/GetUserProfiles'\nUPDATE_PRORITY = \"external/v1/sdk/UpdateAlertPriority\"\nCLOSE_REASONS = [\"True Positive - Suspicious activity\",\"Bening Positive - Suspicious but expected\", \"False Positive - Incorrect alert logic\",\"False Positive - Inaccurate data\",\"Undetermined\"]\n\ndef update_alert_priority(priority, alert, siemplify):\n    if priority == \"Informational\":\n        priority = \"Informative\"\n    if priority != alert[\"severity\"]:\n        url = f\"{siemplify.API_ROOT}/{UPDATE_PRORITY}\"\n        payload = {\"caseId\": alert[\"case_id\"], \"alertIdentifier\": alert[\"identifier\"],\"priority\": priority}\n        response = siemplify.session.post(url, json=payload)\n        siemplify.validate_siemplify_error(response)\n        return True\n    \n    else:\n        \n        return None\n\ndef update_alert_description(description, alert, siemplify):\n    \n    if description != alert[\"description\"] and description:\n        case_id = alert[\"case_id\"]\n        request_dict = {u\"case_id\": case_id,\n                        u\"description\": description}\n        address = u\"{}/{}\".format(siemplify.API_ROOT, u\"external/v1/cases/ChangeCaseDescription?format=snake\")\n        response = siemplify.session.post(address, json=request_dict)\n        siemplify.validate_siemplify_error(response)\n        return True \n    \n    else:\n        \n        return None\n\ndef update_alert_owner(owner, alert, siemplify):\n    \n    if owner != alert[\"assigned_user\"]:\n        assign_to = validate_user(owner,siemplify)\n        if assign_to:\n            case_id = alert[\"case_id\"]\n            alert_id = alert[\"identifier\"]\n            json_payload = {\"caseId\": case_id, \"alertIdentifier\": alert_id, \"userId\": assign_to}\n            result = siemplify.session.post('{}/external/v1/cases/AssignUserToCase'.format(siemplify.API_ROOT), json=json_payload)\n            result.raise_for_status()\n            return True\n        else:\n            return None\n    \n    else:\n        \n        return None\n\ndef close_alert(incident, alert, siemplify):\n    \n    if incident[\"classification\"] == \"True Positive\":\n        reason = \"Malicious\"\n    elif incident[\"classification\"] in [\"Bening Positive\", \"False Positive\"]:\n        reason = \"NotMalicious\"\n    else:\n        reason = \"Inconclusive\"\n    \n    root_cause = f'{incident[\"classification\"]} - {incident[\"classification_reason\"]}'\n    comment = incident[\"classification_comment\"]\n    case_id = alert[\"case_id\"]\n    alert_id = alert[\"identifier\"]\n    \n    response = siemplify.close_alert(root_cause, comment, reason, case_id, alert_id)\n    return True\n\ndef update_siemplify_case(incident,siemplify_alerts,siemplify):\n    \n    for alert in siemplify_alerts:\n        if incident[\"ticketid\"] == alert[\"ticketid\"]:\n            updated_alert = False\n            priority = update_alert_priority(incident[\"severity\"], alert, siemplify)\n            if priority:\n                updated_alert= True\n            description = update_alert_description(incident[\"description\"], alert, siemplify)\n            if description:\n                updated_alert= True\n            owner = update_alert_owner(incident[\"assigned_user\"], alert, siemplify)\n            if owner:\n                updated_alert= True\n            if incident[\"comments_to_sync\"]:\n                for comment in incident[\"comments_to_sync\"]:\n                    siemplify.add_comment(comment, incident[\"case_id\"], alert[\"identifier\"])\n                    updated_alert = True\n            if incident[\"status\"] == \"Closed\" and alert[\"status\"] ==1:\n                close_alert_success = close_alert(incident, alert, siemplify)\n                if close_alert_success:\n                    updated_alert = True\n            if not updated_alert:\n                siemplify.LOGGER.info(f'Nothing to update, skipping case {incident[\"case_id\"]}')\n            \n            return updated_alert\n    \n          \n                \n                    \n                \n\ndef get_user_email(userid, siemplify):\n    json_payload = {\"searchTerm\": \"\",\n                    \"filterRole\": False,\n                    \"requestedPage\": 0,\n                    \"pageSize\": 1000,\n                    \"shouldHideDisabledUsers\": True\n                    }\n    response = siemplify.session.post(GET_USERS_URL.format(siemplify.API_ROOT), json=json_payload)\n    response.raise_for_status()\n    siemplify_users = response.json()['objectsList']\n    \n    if userid:\n        for user in siemplify_users:\n            if userid[0] == \"@\":\n                return userid\n            elif user[\"userName\"] == userid:\n                return user[\"email\"]\n            else:\n                return None\n    else:\n        return None\n\ndef validate_user(usermail, siemplify):\n    json_payload = {\"searchTerm\": \"\",\n                    \"filterRole\": False,\n                    \"requestedPage\": 0,\n                    \"pageSize\": 1000,\n                    \"shouldHideDisabledUsers\": True\n                    }\n    response = siemplify.session.post(GET_USERS_URL.format(siemplify.API_ROOT), json=json_payload)\n    response.raise_for_status()\n    siemplify_users = response.json()['objectsList']\n    \n    for user in siemplify_users:\n        if usermail[0] == \"@\":\n            return usermail\n        elif user[\"email\"] == usermail:\n            return user[\"userName\"]\n        else:\n            return None\n    \n        \ndef calculate_as_time(time):\n    regex = re.compile(r\"(\\.\\d{0,6})(\\d)*(Z)\")\n    time = regex.sub('\\\\1\\\\3',time)\n    _datetime = datetime.datetime.strptime(time, TIME_FORMAT)\n    _datetime = _datetime.replace(tzinfo=datetime.timezone.utc)\n    return _datetime\n    \n\ndef update_sentinel_incident(alert, manager, siemplify):\n    \n    is_updated = False\n    \n    if alert[\"Sync Values\"] != [alert[\"severity\"],alert[\"description\"],alert[\"assigned_user\"]]:\n        incident_number = alert[\"incident_id\"]\n        \n        if alert[\"status\"] == 2 and alert[\"incident_status\"] != \"Closed\":\n            status = \"closed\"\n            if alert[\"root_cause\"] in CLOSE_REASONS:\n                close_reason = alert[\"root_cause\"]\n            else:\n                close_reason = \"Undetermined\"\n            alert[\"incident_status\"] = \"Closed\"    \n        else:\n            close_reason = None\n            if alert[\"incident_status\"] == \"New\":\n                status = \"Active\"\n            else:\n                status = None\n        if alert[\"severity\"] == \"Informative\":\n            severity = \"Informational\"\n        elif alert[\"severity\"] == \"Critical\":\n            severity = \"High\"\n        \n        else:\n            severity = alert[\"severity\"]\n    \n        description = alert[\"description\"]\n        assigned_to = alert[\"assigned_user\"]\n    \n        incident = manager.update_incident(incident_number=incident_number, status=status, close_reason =close_reason,\n                                                   severity=severity, description=description, assigned_to=assigned_to)\n        sync_values_updated = update_sync_values(alert,status,siemplify)\n        \n        is_updated = True\n    \n    if alert[\"comments_to_sync\"]:\n        incident = manager.get_incident_by_incident_number(incident_number=alert[\"incident_id\"])\n        for comment in alert[\"comments_to_sync\"]:\n            incident_comment_data = manager.add_comment_to_incident(incident_name=incident.name, comment=comment)\n        \n        is_updated = True\n    \n    return True\n    \ndef get_sync_values(alert,siemplify):\n    severity = siemplify.get_context_property(2, alert[\"additional_properties\"][\"AlertGroupIdentifier\"], \"AzureSentinel Severity\")\n    description = siemplify.get_context_property(2, alert[\"additional_properties\"][\"AlertGroupIdentifier\"], \"AzureSentinel Description\")\n    owner = siemplify.get_context_property(2, alert[\"additional_properties\"][\"AlertGroupIdentifier\"], \"AzureSentinel Owner\")\n    status = siemplify.get_context_property(2, alert[\"additional_properties\"][\"AlertGroupIdentifier\"], \"AzureSentinel Status\")\n    return [severity, description, owner], status\n\ndef update_sync_values(alert,status, siemplify):\n    try:\n        \n        siemplify.set_context_property(2,alert[\"group_identifier\"],\"AzureSentinel Severity\",alert[\"severity\"])\n        if alert[\"description\"]:\n            siemplify.set_context_property(2,alert[\"group_identifier\"],\"AzureSentinel Description\",alert[\"description\"])\n        if alert[\"assigned_user\"]:\n            siemplify.set_context_property(2,alert[\"group_identifier\"],\"AzureSentinel Owner\",alert[\"assigned_user\"])\n        if alert[\"incident_status\"]:\n            siemplify.set_context_property(2,alert[\"group_identifier\"],\"AzureSentinel Status\",alert[\"incident_status\"])\n    except Exception as e:\n        siemplify.LOGGER.error(\"Failed to update sync values in siemplify\")\n        siemplify.LOGGER.exception(e)\n    \n    return True\n\ndef validate_timestamp(last_run_timestamp, offset_in_hours):\n    \"\"\"\n    Validate timestamp in range\n    :param last_run_timestamp: {datetime} last run timestamp\n    :param offset_in_hours: {datetime} last run timestamp\n    :return: {datetime} if first run, return current time minus offset time, else return timestamp from file\n    \"\"\"\n    \n    current_time = utc_now()\n    # Check if first run\n    if current_time - last_run_timestamp > datetime.timedelta(hours=offset_in_hours):\n        valid_timestamp = current_time - datetime.timedelta(hours=offset_in_hours)\n        return valid_timestamp\n        \n    else:\n        return last_run_timestamp\n\ndef get_alert_comments(alert,siemplify,is_favorite, last_successful_execution_timestamp):\n    comments = siemplify.get_case_comments(alert[\"case_identifier\"])\n    comments_to_sync = []\n    synced_comments = []\n    for comment in comments:\n        if comment[\"creation_time_unix_time_in_ms\"] > last_successful_execution_timestamp:\n            if comment[\"comment\"].startswith(\"AzureSentinel Comment:\"):\n                synced_comments.append(comment[\"comment\"])\n            else:\n                if is_favorite:\n                    if comment[\"is_favorite\"]:\n                        comments_to_sync.append(comment[\"comment\"])\n                else:\n                    comments_to_sync.append(f'SOARComment: {comment[\"comment\"]}')\n    \n    return comments_to_sync, synced_comments\n    \n\ndef process_alert(alert,siemplify, is_favorite, last_successful_execution_timestamp):\n    alert_data = {}\n    alert_data[\"incident_id\"] = alert[\"additional_properties\"][\"incidentNumber\"]\n    alert_data[\"severity\"] = alert[\"additional_properties\"][\"Priority\"]\n    alert_data[\"ticketid\"] = alert[\"additional_properties\"][\"TicketId\"]\n    alert_data[\"name\"] = alert[\"name\"]\n    alert_data[\"identifier\"] = alert[\"identifier\"]\n    alert_data[\"group_identifier\"] = alert[\"additional_properties\"][\"AlertGroupIdentifier\"]\n    alert_data[\"Sync Values\"], alert_data[\"incident_status\"] = get_sync_values(alert,siemplify)\n    alert_data[\"comments_to_sync\"], alert_data[\"synced_comments\"] = get_alert_comments(alert,siemplify, is_favorite, last_successful_execution_timestamp)\n    \n    return alert_data\n    \ndef get_incident_comments(incidentid, manager, last_successful_execution_time, siemplify):\n    comments = manager.get_incident_comments(incidentid)\n    comments.reverse()\n    comments_to_sync = []\n    synced_comments = []\n\n    for comment in comments:\n        if comment[\"properties\"][\"message\"].startswith(\"SOARComment:\"):\n            synced_comments.append(comment[\"properties\"][\"message\"])\n           \n        else:\n            if calculate_as_time(comment[\"properties\"][\"lastModifiedTimeUtc\"]) > last_successful_execution_time:\n                comments_to_sync.append(f'AzureSentinel Comment: {comment[\"properties\"][\"message\"]}')\n                \n    return comments_to_sync, synced_comments            \n\ndef get_instance_identifier(siemplify,environment,instance_name):\n    url = f\"{siemplify.API_ROOT}/external/v1/integrations/GetOptionalIntegrationInstances\"\n    payload = {\"environments\": [environment],\"integrationIdentifier\": INTEGRATION_NAME}\n    headers = {\"Content-Type\": \"application/json\", \"AppKey\":siemplify.api_key, \"accept\":\"application/json\"}\n    r = requests.post(url,headers=headers, json=payload, verify=False)\n    available_instances = r.json()\n    \n    if instance_name:\n        for instance in available_instances:\n            if instance[\"instanceName\"] == instance_name:\n                return instance[\"identifier\"]\n    else:\n        return available_instances[0][\"identifier\"]\n    \n\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME # In order to use the SiemplifyLogger, you must assign a name to the script.\n    environment = siemplify.extract_job_param(param_name=\"Environment\", print_value=True)\n    instance_name = siemplify.extract_job_param(param_name=\"Instance Name\", print_value=True, default_value=None)\n    hours_back = siemplify.extract_job_param(param_name = \"Hours Back\", print_value=True, default_value=24, input_type = int)\n    tags = siemplify.extract_job_param(param_name = \"Sync Tags\", print_value=True, input_type = str).split(\",\")\n    is_favorite = siemplify.extract_job_param(param_name = \"Only Favorite Comments\", print_value=True, input_type = bool)\n\n    \n    try:\n        siemplify.LOGGER.info(f\"Checking available integrations for {INTEGRATION_NAME} in {environment}\")\n        integration_identifier = get_instance_identifier(siemplify,environment,instance_name)\n        siemplify.LOGGER.info(f\"Using integration Identifier {integration_identifier}\")\n        siemplify.LOGGER.info(f\"Getting integration config details\")\n        integration_settings =  siemplify.get_configuration(INTEGRATION_NAME, environment = environment, integration_instance = integration_identifier)\n        api_root = extract_script_param(siemplify=siemplify, input_dictionary=integration_settings, param_name='Api Root', print_value = True)\n        login_url = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True,\n                                            param_name='OAUTH2 Login Endpoint Url')\n        client_id = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True, param_name='Client ID')\n        client_secret = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, param_name='Client Secret')\n        tenant_id = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True,\n                                            param_name='Azure Active Directory ID')\n        workspace_id = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True,\n                                               param_name='Azure Sentinel Workspace Name')\n        resource = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True, param_name='Azure Resource Group')\n        subscription_id = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True,\n                                                  param_name='Azure Subscription ID')\n        verify_ssl = extract_script_param(siemplify = siemplify, input_dictionary=integration_settings, print_value = True, param_name='Verify SSL',\n                                             input_type=bool, default_value=False)\n        \n        last_successful_execution_time = siemplify.fetch_timestamp(datetime_format=True, timezone = \"UTC\")\n        last_successful_execution_time = validate_timestamp(last_successful_execution_time, hours_back)\n        last_successful_execution_timestamp = convert_datetime_to_unix_time(last_successful_execution_time)\n        siemplify.LOGGER.info(f\"Fetching cases modified after {last_successful_execution_time}\")\n        \n        \n        siemplify_cases = siemplify.get_cases_by_filter(environments = [environment], tags = tags, statuses = [OPEN_CASE_STATUS])\n        siemplify_closed_ticket_ids = siemplify.get_alerts_ticket_ids_from_cases_closed_since_timestamp(last_successful_execution_timestamp, None)\n        closed_cases_ids = []\n        closed_alerts = []\n        relevant_cases = []\n        siemplify_alerts = []\n        incident_list =[]\n        target_alerts =[]\n        target_alerts_ids = []\n        \n        if siemplify_closed_ticket_ids:\n            for ticket_id in siemplify_closed_ticket_ids:\n                try:\n                    closed_cases_ids.extend(\n                        [case_id for case_id in siemplify.get_cases_by_ticket_id(ticket_id)]\n                    )\n                except Exception as e:\n                    siemplify.LOGGER.error('Failed to fetch case with ticket id {}. Reason {}'.format(ticket_id, e))\n       \n        filtered_closed_case_ids = []\n        for case in closed_cases_ids:\n            if siemplify.get_cases_by_filter(environments = [environment], tags = tags, statuses = [CLOSE_CASE_STATUS], case_ids_free_search =str(case)):\n                filtered_closed_case_ids.append(case)\n        \n        siemplify_cases.extend(filtered_closed_case_ids)\n        \n        if siemplify_cases:\n            for case in siemplify_cases:\n                case_data = siemplify._get_case_by_id(case)\n                \n                for alert in case_data[\"cyber_alerts\"]:\n                    if alert[\"additional_properties\"][\"SourceSystemName\"] == \"MicrosoftAzureSentinel\":\n                        alert_data = process_alert(alert, siemplify, is_favorite, last_successful_execution_timestamp)\n                        alert_data[\"status\"] = case_data[\"status\"]\n                        alert_data[\"assigned_user\"] = get_user_email(case_data[\"assigned_user\"], siemplify)\n                        alert_data[\"description\"] = case_data[\"description\"]\n                        alert_data[\"modification_time\"] = case_data[\"modification_time\"]\n                        alert_data[\"case_id\"] = case_data[\"identifier\"]\n                        if  case in filtered_closed_case_ids :\n                            closure_data = siemplify.get_case_closure_details([case])\n                            alert_data[\"reason\"] = closure_data[0][\"reason\"]\n                            alert_data[\"root_cause\"] = closure_data[0][\"root_cause\"]\n                        siemplify_alerts.append(alert_data)\n                        incident_list.append(int(alert_data[\"incident_id\"]))\n                        \n                        \n        \n                        \n        for alert in siemplify_alerts:\n            if (alert[\"modification_time\"] > last_successful_execution_timestamp):\n                if alert[\"Sync Values\"] != [alert[\"severity\"],alert[\"description\"],alert[\"assigned_user\"]]:\n                    target_alerts.append(alert)\n                    target_alerts_ids.append(alert[\"incident_id\"])\n                elif alert[\"comments_to_sync\"]:\n                    target_alerts.append(alert)\n                    target_alerts_ids.append(alert[\"incident_id\"])\n        \n        \n        siemplify.LOGGER.info(f\"Found {len(target_alerts)} relevant alerts in Siemplify\")\n        \n        siemplify.LOGGER.info(f\"Getting AS incidents updated after {last_successful_execution_time}\")\n        \n        manager = ExtendedMicrosoftAzureSentinelManager(\n            api_root=api_root,\n            client_id=client_id,\n            client_secret=client_secret,\n            tenant_id=tenant_id,\n            workspace_id=workspace_id,\n            resource=resource,\n            subscription_id=subscription_id,\n            login_url=login_url,\n            verify_ssl=verify_ssl\n        )\n        \n        incidents = manager.get_updated_incidents(updated_time = last_successful_execution_time, limit =200)\n        incidents = [incident.to_json() for incident in incidents]\n        \n        siemplify.LOGGER.info(f\"Updating Azure Sentinel Incidents\")\n        \n        updated_incidents = []\n        \n        for alert in target_alerts:\n                siemplify.LOGGER.info(f\"Updating AS incident {alert['incident_id']} from case {alert['case_id']}\")\n                result = update_sentinel_incident(alert, manager, siemplify)\n                updated_incidents.append(result)\n        \n        siemplify.LOGGER.info(f\"Succesfully Updated {len(updated_incidents)} incidents in Azure Sentinel\")\n        \n        for case in relevant_cases:\n            for alert in case[\"cyber_alerts\"]:\n                if alert[\"additional_properties\"][\"SourceSystemName\"] == \"MicrosoftAzureSentinel\":\n                    incident_list.append(int(alert[\"additional_properties\"][\"incidentNumber\"]))\n        \n        filtered_incidents = []\n        for incident in incidents:\n            if incident[\"properties\"][\"incidentNumber\"] in incident_list:\n                filtered_incidents.append(incident)\n                \n        \n        siemplify.LOGGER.info(f\"Found {len(filtered_incidents)} relevant incident(s) in AS\")\n        \n        target_incidents = []\n        target_incidents_ids =[]\n        \n        if filtered_incidents:\n            for incident in filtered_incidents:\n                for alert in siemplify_alerts:\n                    if int(alert[\"incident_id\"]) == incident[\"properties\"][\"incidentNumber\"]:\n                        incident_data ={}\n                        incident_data[\"incident_id\"] = str(incident[\"properties\"][\"incidentNumber\"])\n                        incident_data[\"case_id\"] = alert[\"case_id\"]\n                        incident_data[\"ticketid\"] = alert[\"ticketid\"]\n                        incident_data[\"modification_time\"] = calculate_as_time(incident[\"properties\"][\"lastModifiedTimeUtc\"])\n                        incident_data[\"status\"] = incident[\"properties\"][\"status\"]\n                        incident_data[\"assigned_user\"] = incident[\"properties\"][\"owner\"][\"assignedTo\"]\n                        incident_data[\"severity\"] = incident[\"properties\"][\"severity\"]\n                        if incident[\"properties\"][\"status\"] == \"Closed\":\n                            incident_data[\"classification\"] = incident[\"properties\"][\"classification\"]\n                            incident_data[\"classification_reason\"] = incident[\"properties\"][\"classificationReason\"]\n                            incident_data[\"classification_comment\"] = incident[\"properties\"][\"classificationComment\"]\n                        incident_data[\"description\"] = incident[\"properties\"][\"description\"]\n                        incident_data[\"comments_to_sync\"], incident_data[\"synced_comments\"] = get_incident_comments(incident[\"name\"],manager, last_successful_execution_time, siemplify)\n                        target_incidents.append(incident_data)\n                        target_incidents_ids.append(incident_data[\"incident_id\"])\n        if target_incidents:\n            siemplify.LOGGER.info(f\"Attempting to Update {len(target_incidents)} relevant cases in Siemplify\")\n        updated_alerts = []\n        for incident in target_incidents:\n            if incident[\"incident_id\"] in target_alerts_ids:\n                for alert in target_alerts:\n                    if convert_datetime_to_unix_time(incident[\"modification_time\"]) > alert[\"modification_time\"]:\n                        siemplify.LOGGER.info(f'Attempting to update case {incident[\"case_id\"]}')\n                        updated_alert = update_siemplify_case(incident, siemplify_alerts, siemplify)\n                        if updated_alert:\n                            updated_alerts.append(updated_alert)\n            else:\n                siemplify.LOGGER.info(f'Attempting to update case {incident[\"case_id\"]}')\n                updated_alert = update_siemplify_case(incident, siemplify_alerts, siemplify)\n                if updated_alert:\n                    updated_alerts.append(updated_alert)\n        if updated_alerts:\n            siemplify.LOGGER.info(f\"Succesfully updated {len(updated_alerts)} Alerts in siemplify\")\n        \n        \n        new_timestamp = utc_now()\n        siemplify.LOGGER.info(f\"Update Job last execution timestamp to {new_timestamp}\")\n        new_timestamp = datetime.datetime.timestamp(new_timestamp) *1000\n            \n            \n        siemplify.save_timestamp(new_timestamp=int(new_timestamp))\n\n            \n\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()",
    "creator": "7a7f9e2c-7774-4221-8558-986f5708fd17",
    "description": "",
    "isEnabled": false,
    "isCustom": true,
    "version": 211,
    "parameters": [
        {
            "id": 14,
            "isMandatory": true,
            "name": "Environment",
            "type": 2,
            "value": "Default Environment"
        },
        {
            "id": 15,
            "isMandatory": false,
            "name": "Instance Name",
            "type": 2,
            "value": ""
        },
        {
            "id": 16,
            "isMandatory": true,
            "name": "Hours Back",
            "type": 1,
            "value": "24"
        },
        {
            "id": 17,
            "isMandatory": true,
            "name": "Sync Tags",
            "type": 2,
            "value": "Azure Sentinel"
        },
        {
            "id": 18,
            "isMandatory": false,
            "name": "Only Favorite Comments",
            "type": 0,
            "value": "false"
        }
    ],
    "runIntervalInSeconds": 60,
    "creationTime": "2022-11-25T13:24:58.306Z",
    "lastModificationTime": "2022-11-28T13:23:37.408Z",
    "isSystemJob": false
}